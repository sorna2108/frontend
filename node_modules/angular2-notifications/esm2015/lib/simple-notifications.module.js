import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SimpleNotificationsModule_1;
import { CommonModule } from '@angular/common';
import { InjectionToken, NgModule } from '@angular/core';
import { NotificationComponent } from './components/notification/notification.component';
import { SimpleNotificationsComponent } from './components/simple-notifications/simple-notifications.component';
import { DEFAULT_OPTIONS } from './consts/default-options.const';
import { NotificationsService } from './services/notifications.service';
export const OPTIONS = new InjectionToken('options');
export function optionsFactory(options) {
    return Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
}
let SimpleNotificationsModule = SimpleNotificationsModule_1 = class SimpleNotificationsModule {
    static forRoot(options = {}) {
        return {
            ngModule: SimpleNotificationsModule_1,
            providers: [
                NotificationsService,
                {
                    provide: OPTIONS,
                    useValue: options
                },
                {
                    provide: 'options',
                    useFactory: optionsFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    }
};
SimpleNotificationsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SimpleNotificationsModule });
SimpleNotificationsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SimpleNotificationsModule_Factory(t) { return new (t || SimpleNotificationsModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SimpleNotificationsModule, { declarations: function () { return [SimpleNotificationsComponent,
        NotificationComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SimpleNotificationsComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleNotificationsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    SimpleNotificationsComponent,
                    NotificationComponent
                ],
                exports: [SimpleNotificationsComponent]
            }]
    }], null, null); })();
export { SimpleNotificationsModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW5vdGlmaWNhdGlvbnMubW9kdWxlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyMi1ub3RpZmljYXRpb25zL2xpYi9zaW1wbGUtbm90aWZpY2F0aW9ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV4RSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQVUsU0FBUyxDQUFDLENBQUM7QUFDOUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFPO0FBQ3RDLElBQUUsdUNBQ0ssZUFBZSxHQUNmLE9BQU8sRUFDVjtBQUNKLENBQUM7QUFZRCxJQUFhLHlCQUF5QixpQ0FBdEMsTUFBYSx5QkFBeUI7QUFDdEMsSUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQW1CLEVBQUU7QUFBSSxRQUN0QyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsMkJBQXlCO0FBQ3pDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRLG9CQUFvQjtBQUM1QixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSxPQUFPO0FBQzFCLG9CQUFVLFFBQVEsRUFBRSxPQUFPO0FBQzNCLGlCQUFTO0FBQ1QsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsU0FBUztBQUM1QixvQkFBVSxVQUFVLEVBQUUsY0FBYztBQUNwQyxvQkFBVSxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7QUFDekIsaUJBQVM7QUFDVCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBbEJZLHlCQUF5QixrREFWckMsUUFBUSxDQUFDLFVBQ1I7TUFBTyxFQUFFLGNBQ1AsWUFBWSxVQUNiLFVBQ0QsWUFBWSxFQUFFLGNBQ1osNEJBQTRCLGNBQzVCLHFCQUFxQixVQUN0QixVQUNELE9BQU8sRUFBRSxDQUFDOztBQUE0QixDQUFDLE1BQ3hDLENBQUMsSUFDVztzQkFBeUIsQ0FrQnJDOzs7Ozs7Ozs7Ozs7OzswQkFDRDs7QUE3Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFsQkEsQUFBQSxBQVZBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWtCQSxBQWxCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFNpbXBsZU5vdGlmaWNhdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2ltcGxlLW5vdGlmaWNhdGlvbnMvc2ltcGxlLW5vdGlmaWNhdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IERFRkFVTFRfT1BUSU9OUyB9IGZyb20gJy4vY29uc3RzL2RlZmF1bHQtb3B0aW9ucy5jb25zdCc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL29wdGlvbnMudHlwZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbm90aWZpY2F0aW9ucy5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IE9QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48T3B0aW9ucz4oJ29wdGlvbnMnKTtcbmV4cG9ydCBmdW5jdGlvbiBvcHRpb25zRmFjdG9yeShvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgLi4uREVGQVVMVF9PUFRJT05TLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTaW1wbGVOb3RpZmljYXRpb25zQ29tcG9uZW50LFxuICAgIE5vdGlmaWNhdGlvbkNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbU2ltcGxlTm90aWZpY2F0aW9uc0NvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU2ltcGxlTm90aWZpY2F0aW9uc01vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IE9wdGlvbnMgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U2ltcGxlTm90aWZpY2F0aW9uc01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU2ltcGxlTm90aWZpY2F0aW9uc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBOb3RpZmljYXRpb25zU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE9QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6ICdvcHRpb25zJyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBvcHRpb25zRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbT1BUSU9OU11cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==